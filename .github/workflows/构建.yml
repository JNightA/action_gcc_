name: 高级C构建器

on:
  push:
    branches: [ main ]
    tags: ['v*'] 
  workflow_dispatch:
    inputs:
      build_subdir:
        description: '是否编译子目录？ (yes/no)'
        required: true
        type: choice
        options:
          - no
          - yes
        default: 'no'
      subdir_path:
        description: '请输入要编译的子目录路径（留空则自动检测）'
        required: false
        default: ''
      target_arch:
        description: '选择目标架构'
        required: true
        type: choice
        options:
          - arm32
          - arm64
        default: 'arm64'
      compile_flags:
        description: '自定义编译参数（默认：-pie）'
        required: false
        default: '-pie'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      exec_name: ${{ steps.detect.outputs.exec_name }}
      target_arch: ${{ github.event.inputs.target_arch }}
    
    steps:
    - name: 结帐代码
      uses: actions/checkout@v4

    - name: 缓存APT软件包
      uses: actions/cache@v4
      with:
        path: |
         /var/cache/apt/archives  # 直接缓存系统目录
         ~/cross-compiler-cache    # 交叉编译工具链缓存
        key: ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}-${{ hashFiles('**/apt-versions.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}-

    - name: 设置工具链
      run: |
        sudo apt-get -o Dir::Cache::Archives="/var/cache/apt/archives" update
        sudo apt-get -y --allow-downgrades \
        --no-install-recommends \
        --fix-broken \
        install \
        gcc-aarch64-linux-gnu=4:13.2.0-7ubuntu1 \
        binutils-aarch64-linux-gnu=2.42-4ubuntu2.5
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            sudo apt-get install -y gcc-arm-linux-gnueabi
            ;;
          arm64)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
          *)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
        esac

    - name: 检测源文件
      id: detect
      run: |
        # 确定搜索路径
        if [[ "${{ github.event.inputs.build_subdir }}" == "yes" ]]; then
          search_path="${ { github.event.inputs.subdir_path }:-*}"
          search_path="${search_path%/}/"  # 标准化路径格式
        else
          search_path="."
        fi

        # 查找C文件
        c_files=$(find "$search_path" -name '*.c' -not -path '*/.*')
        if [ -z "$c_files" ]; then
          echo "::error::未找到任何.c文件"
          exit 1
        fi

        # 获取主文件名
        first_file=$(echo "$c_files" | head -n1 | xargs basename -s .c)
        echo "exec_name=$first_file" >> $GITHUB_OUTPUT
        echo "source_files=$c_files" >> $GITHUB_OUTPUT

    - name: 编译程序
      run: |
        # 设置编译器
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            compiler=arm-linux-gnueabi-gcc
            suffix="-arm32"
            ;;
          arm64)
            compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
          *)
            compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
        esac

        # 执行编译
        $compiler ${{ github.event.inputs.compile_flags }} -static \
          -o "${{ steps.detect.outputs.exec_name }}${suffix}" \
          ${{ steps.detect.outputs.source_files }}

    - name: 上载工件 修不了
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.detect.outputs.exec_name }}_${{ github.event.inputs.target_arch }}
        path: ${{ steps.detect.outputs.exec_name }}*
# 在 workflow 最后添加
    - name: 清洁旧的缓存
      uses: actions/cache/delete@v1
      with:
         key: ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}-
         
  release:
    if: github.event_name == 'push懒得修' && startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:  # ✅ 显式声明权限
      contents: write
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.exec_name }}_${{ needs.build.outputs.target_arch }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v2  # ✅ 使用v2版本
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}  # ✅ 自动获取标签名(v1.1)
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ needs.build.outputs.exec_name }}*
        asset_name: ${{ needs.build.outputs.exec_name }}_${{ needs.build.outputs.target_arch }}
        asset_content_type: application/octet-stream
