name: Advanced C Builder

on:
  push:
    branches: [ main ]
    tags: ['v*'] 
  workflow_dispatch:
    inputs:
      build_subdir:
        description: '是否编译子目录？ (yes/no)'
        required: true
        type: choice
        options:
          - no
          - yes
        default: 'no'
      subdir_path:
        description: '请输入要编译的子目录路径（留空则自动检测）'
        required: false
        default: ''
      target_arch:
        description: '选择目标架构'
        required: true
        type: choice
        options:
          - arm32
          - arm64
        default: 'arm64'
      compile_flags:
        description: '自定义编译参数（默认：-pie）'
        required: false
        default: '-pie'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      exec_name: ${{ steps.detect.outputs.exec_name }}
      target_arch: ${{ github.event.inputs.target_arch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache toolchain
      uses: actions/cache@v4
      id: toolchain-cache
      with:
        path: |
          ~/apt-cache
          /usr/bin/arm-linux-gnueabi-gcc
          /usr/bin/aarch64-linux-gnu-gcc
        key: ${{ runner.os }}-toolchain-${{ github.event.inputs.target_arch }}

    - name: Setup toolchain
      if: steps.toolchain-cache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            sudo apt-get install -y gcc-arm-linux-gnueabi
            ;;
          arm64)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
          *)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
        esac

    - name: Detect source files
      id: detect
      run: |
        search_path="."
        if [[ "${{ github.event.inputs.build_subdir }}" == "yes" ]]; then
          search_path="${ { github.event.inputs.subdir_path }:-*}"
          search_path=$(echo "$search_path" | sed 's:/*$::')  # 标准化路径
        fi

        # 查找C文件
        c_files=$(find "$search_path" -name '*.c' -not -path '*/.*')
        if [ -z "$c_files" ]; then
          echo "::error::在路径 $search_path 下未找到任何.c文件"
          exit 1
        fi

        first_file=$(echo "$c_files" | head -n1 | xargs basename -s .c)
        echo "exec_name=$first_file" >> $GITHUB_OUTPUT
        echo "source_files=$c_files" >> $GITHUB_OUTPUT

    - name: Compile program
      run: |
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            compiler=arm-linux-gnueabi-gcc
            suffix="-arm32"
            ;;
          arm64)
            compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
          *)
            compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
        esac

        # 带版本号的编译
        timestamp=$(date +%Y%m%d%H%M%S)
        output_file="${ { steps.detect.outputs.exec_name }}_${ { github.run_id }}_${{ github.event.inputs.target_arch }}"
        
        $compiler ${{ github.event.inputs.compile_flags }} $cflags -static \
          -o "${output_file}" \
          ${{ steps.detect.outputs.source_files }}

        echo "BINARY_PATH=${output_file}" >> $GITHUB_ENV

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_PATH }}
        path: ${{ env.BINARY_PATH }}
