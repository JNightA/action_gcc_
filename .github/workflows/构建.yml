name: Advanced C Builder

on:
  push:
    branches: [ main ]
    tags: ['v*'] 
  workflow_dispatch:
    inputs:
      build_subdir:
        description: '是否编译子目录？ (yes/no)'
        required: true
        type: choice
        options:
          - no
          - yes
        default: 'no'
      subdir_path:
        description: '请输入要编译的子目录路径（留空则自动检测）'
        required: false
        default: ''
      target_arch:
        description: '选择目标架构'
        required: true
        type: choice
        options:
          - arm32
          - arm64
        default: 'arm64'
      compile_flags:
        description: '自定义编译参数（默认：-pie）'
        required: false
        default: '-pie'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      exec_name: ${{ steps.detect.outputs.exec_name }}
      target_arch: ${{ github.event.inputs.target_arch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache apt packages
      uses: actions/cache@v4
      id: cache-apt
      with:
        path: |
          ~/apt-cache
        key: ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}-

    - name: Setup toolchain
      run: |
        sudo mkdir -p ~/apt-cache/archives
        sudo ln -sf ~/apt-cache/archives /var/cache/apt/archives
        
        sudo apt-get update -o Dir::Cache::archives="~/apt-cache/archives"
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            sudo apt-get install -y gcc-arm-linux-gnueabi
            ;;
          arm64)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
          *)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            ;;
        esac

    - name: Detect source files
      id: detect
      run: |
        # 确定搜索路径
        if [[ "${{ github.event.inputs.build_subdir }}" == "yes" ]]; then
          search_path="${GITHUB_WORKSPACE}/${ { github.event.inputs.subdir_path }:-*}"
          search_path="${search_path%/}/"
        else
          search_path="$GITHUB_WORKSPACE"
        fi

        # 添加调试信息
        echo "Searching in: $search_path"
        c_files=$(find "$search_path" -name '*.c' -not -path '*/.*')
        echo "Found C files: $c_files"

        first_file=$(echo "$c_files" | head -n1 | xargs basename -s .c)
        echo "exec_name=$first_file" >> $GITHUB_OUTPUT
        echo "source_files=$c_files" >> $GITHUB_OUTPUT

    - name: Compile program
      run: |
        # 添加编译后文件列表
        $compiler [...] -o "bin/${{ steps.detect.outputs.exec_name }}${suffix}" [...]

        # 验证文件生成
        echo "Generated files:"
        ls -lh "bin/${{ steps.detect.outputs.exec_name }}${suffix}"

    - name: Create ZIP package
      run: |
        mkdir -p dist
        zip "dist/${{ steps.detect.outputs.exec_name }}_package.zip" \
          ${{ steps.detect.outputs.source_files }} \
          "bin/${{ steps.detect.outputs.exec_name }}${suffix}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.detect.outputs.exec_name }}_${{ github.event.inputs.target_arch }}
        path: |
          bin/${{ steps.detect.outputs.exec_name }}*
          dist/${{ steps.detect.outputs.exec_name }}_package.zip
          
          
          
