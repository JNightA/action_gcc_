name: Advanced C Builder

on:
  push:
    branches: [ main ]
    tags: ['v*'] 
  workflow_dispatch:
    inputs:
      build_subdir:
        description: '是否编译子目录？ (yes/no)'
        required: true
        type: choice
        options:
          - no
          - yes
        default: 'no'
      subdir_path:
        description: '请输入要编译的子目录路径（留空则自动检测）'
        required: false
        default: ''
      target_arch:
        description: '选择目标架构'
        required: true
        type: choice
        options:
          - arm32
          - arm64
          - x86
          - x86_64
        default: 'arm64'
      compile_flags:
        description: '自定义编译参数（默认：-pie）'
        required: false
        default: '-pie'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      exec_name: ${{ steps.detect.outputs.exec_name }}
      target_arch: ${{ github.event.inputs.target_arch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache apt packages
      uses: actions/cache@v4
      id: cache-apt
      with:
        path: |
          ~/apt-cache
        key: ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}-

    - name: Setup toolchain
      run: |
        sudo mkdir -p ~/apt-cache/archives
        sudo ln -sf ~/apt-cache/archives /var/cache/apt/archives
        
        sudo apt-get update -o Dir::Cache::archives="~/apt-cache/archives"
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            sudo apt-get install -y --no-install-recommends gcc-arm-linux-gnueabi
            ;;
          arm64)
            sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu
            ;;
          x86)
            sudo apt-get install -y --no-install-recommends gcc-multilib
            ;;
          x86_64)
            sudo apt-get install -y --no-install-recommends gcc
            ;;
          *)
            sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu
            ;;
        esac

    - name: Detect source files
      id: detect
      run: |
        if [[ "${{ github.event.inputs.build_subdir }}" == "yes" ]]; then
          search_path="${ { github.event.inputs.subdir_path }:-*}"
          search_path="${search_path%/}/"
        else
          search_path="."
        fi

        c_files=$(find "$search_path" -name '*.c' -not -path '*/.*')
        if [ -z "$c_files" ]; then
          echo "::error::未找到任何.c文件"
          exit 1
        fi

        first_file=$(echo "$c_files" | head -n1 | xargs basename -s .c)
        echo "exec_name=$first_file" >> $GITHUB_OUTPUT
        echo "source_files=$c_files" >> $GITHUB_OUTPUT

    - name: Compile program
      run: |
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            compiler=arm-linux-gnueabi-gcc
            suffix="-arm32"
            ;;
          arm64)
            compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
          x86)
            compiler=gcc
            suffix="-x86"
            cflags="-m32"
            ;;
          x86_64)
            compiler=gcc
            suffix="-x86_64"
            ;;
          *)
            compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
        esac

        $compiler ${{ github.event.inputs.compile_flags }} $cflags -static \
          -o "${{ steps.detect.outputs.exec_name }}${suffix}" \
          ${{ steps.detect.outputs.source_files }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.detect.outputs.exec_name }}_${{ github.event.inputs.target_arch }}
        path: ${{ steps.detect.outputs.exec_name }}*

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.exec_name }}_${{ needs.build.outputs.target_arch }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ needs.build.outputs.exec_name }}*
        asset_name: ${{ needs.build.outputs.exec_name }}_${{ needs.build.outputs.target_arch }}
        asset_content_type: application/octet-stream
