name: Android ARM64 Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup path
      run: |
        cat config.env | grep nbbm= >> $GITHUB_ENV
        cat config.env | grep aapi= >> $GITHUB_ENV
        cat config.env | grep cbbm= >> $GITHUB_ENV
    
    # 缓存 Android SDK 命令行工具
    - name: Cache Android SDK
      uses: actions/cache@v3
      id: cache-sdk
      with:
        path: $HOME/android-sdk/cmdline-tools
        key: android-sdk-${{ hashFiles('config.env') }}

    - name: Setup Android SDK
      if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        mkdir -p $HOME/android-sdk
        wget https://dl.google.com/android/repository/${{ env.cbbm }} -O cmdline-tools.zip
        unzip cmdline-tools.zip -d $HOME/android-sdk/cmdline-tools
        mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV

    - name: Set Android Path
      run: |
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Accept licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

    # 缓存 NDK
    - name: Cache Android NDK
      uses: actions/cache@v3
      id: cache-ndk
      with:
        path: $ANDROID_HOME/ndk/${{ env.nbbm }}
        key: android-ndk-${{ env.nbbm }}

    - name: Install NDK
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;${{ env.nbbm }}" --sdk_root=$ANDROID_HOME

    - name: Set NDK Environment
      run: |
        echo "NDK_HOME=$ANDROID_HOME/ndk/${{ env.nbbm }}" >> $GITHUB_ENV
        echo "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    - name: Verify NDK Installation
      run: |
        echo "NDK路径: $NDK_HOME"
        ls -l $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang

    - name: Find C file
      id: find-c-file
      run: |
        c_files=( *.c )
        if [ ${#c_files[@]} -ne 1 ]; then
          echo "::error::必须且只能存在一个.c文件 (当前找到 ${#c_files[@]} 个)"
          exit 1
        fi
        echo "C_FILE=${c_files[0]}" >> $GITHUB_OUTPUT
        echo "OUTPUT_NAME=${c_files[0]%.*}" >> $GITHUB_OUTPUT

    - name: Build executable
      run: |
        $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang \
          --target=aarch64-linux-android${{ env.aapi }} \
          --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
          -fPIE -pie \
          -o "${{ steps.find-c-file.outputs.OUTPUT_NAME }}" \
          "${{ steps.find-c-file.outputs.C_FILE }}"

    - name: Verify binary
      run: |
        file "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"
        readelf -d "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-binary
        path: "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"
