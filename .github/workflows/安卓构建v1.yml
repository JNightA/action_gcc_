name: Android ARM64 Build


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: $HOME/android-sdk
      NDK_VERSION: ${{ secrets.NDK_VERSION }}  # 建议通过 secrets 管理版本

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup path
      run: |
        grep -E '^(nbbm|aapi|cbbm)=' config.env >> $GITHUB_ENV

    # Android SDK 缓存优化
    - name: Cache Android SDK
      uses: actions/cache@v3
      id: sdk-cache
      with:
        path: |
          ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
          ${{ env.ANDROID_SDK_ROOT }}/licenses
        key: android-sdk-${{ env.cbbm }}-${{ hashFiles('config.env') }}

    - name: Setup Android SDK
      if: steps.sdk-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.ANDROID_SDK_ROOT }}
        wget https://dl.google.com/android/repository/${{ env.cbbm }} -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
        mv ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/cmdline-tools ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest
        yes | ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager --licenses

    - name: Add Android to PATH
      run: |
        echo "${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin" >> $GITHUB_PATH

    # NDK 缓存优化
    - name: Cache Android NDK
      uses: actions/cache@v3
      id: ndk-cache
      with:
        path: ${{ env.ANDROID_SDK_ROOT }}/ndk
        key: android-ndk-${{ env.nbbm }}

    - name: Install NDK
      if: steps.ndk-cache.outputs.cache-hit != 'true'
      run: |
        ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager \
          "ndk;${{ env.nbbm }}" \
          --sdk_root=${{ env.ANDROID_SDK_ROOT }}

    - name: Setup NDK Environment
      run: |
        echo "NDK_HOME=${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.nbbm }}" >> $GITHUB_ENV
        echo "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    # 以下步骤保持不变...
    - name: Verify NDK Installation
      run: |
        echo "NDK路径: $NDK_HOME"
        ls -l $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang

    - name: Find C file
      id: find-c-file
      run: |
        c_files=( *.c )
        if [ ${#c_files[@]} -ne 1 ]; then
          echo "::error::必须且只能存在一个.c文件 (当前找到 ${#c_files[@]} 个)"
          exit 1
        fi
        echo "C_FILE=${c_files[0]}" >> $GITHUB_OUTPUT
        echo "OUTPUT_NAME=${c_files[0]%.*}" >> $GITHUB_OUTPUT

    - name: Build executable
      run: |
        $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang \
          --target=aarch64-linux-android${{ env.aapi }} \
          --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
          -fPIE -pie \
          -o "${{ steps.find-c-file.outputs.OUTPUT_NAME }}" \
          "${{ steps.find-c-file.outputs.C_FILE }}"

    - name: Verify binary
      run: |
        file "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"
        readelf -d "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-binary
        path: "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"
