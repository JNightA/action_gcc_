name: Android BusyBox Builder

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Java环境设置
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 基础依赖安装
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git make unzip \
          python3 libncurses5

    # Android SDK配置
    - name: Setup Android SDK
      run: |
        export ANDROID_SDK_ROOT=$GITHUB_WORKSPACE/android-sdk
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip
        unzip -q commandlinetools-linux-*.zip -d $ANDROID_SDK_ROOT/cmdline-tools/latest
        rm commandlinetools-linux-*.zip

    # Android许可证接受
    - name: Accept licenses
      run: |
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
          --sdk_root=$ANDROID_SDK_ROOT \
          --licenses

    # NDK安装
    - name: Install NDK r28
      run: |
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
          --sdk_root=$ANDROID_SDK_ROOT \
          --install "ndk;28.0.13004108"

    # 环境变量配置
    - name: Configure toolchains
      run: |
        export NDK_ROOT=$ANDROID_SDK_ROOT/ndk/28.0.13004108
        echo "NDK_ROOT=$NDK_ROOT" >> $GITHUB_ENV
        echo "CLANG_BIN=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
        echo "$CLANG_BIN" >> $GITHUB_PATH

    # BusyBox源码获取
    - name: Clone BusyBox with retry
      run: |
        for i in {1..3}; do
          git clone --depth=1 --branch=master \
            https://github.com/mirror/busybox.git && break || sleep 15
          [ $i -eq 3 ] && exit 1
        done

    # 配置修改（整合CSDN教程要点）
    - name: Configure BusyBox
      run: |
        cd busybox
        
        # 生成默认配置
        make defconfig

        # 应用安卓专用配置
        sed -i '/CONFIG_STATIC/s/.*/CONFIG_STATIC=y/' .config
        sed -i '/CONFIG_PIE/s/.*/CONFIG_PIE=y/' .config
        sed -i '/CONFIG_FEATURE_USE_INITTAB/s/=y/=n/' .config
        sed -i '/CONFIG_EXTRA_CFLAGS/s/""/"-march=armv8-a -mtune=cortex-a75"/' .config
        
        # 设置交叉编译参数
        echo "CONFIG_CROSS_COMPILER_PREFIX=\"aarch64-linux-android35-\"" >> .config
        echo "CONFIG_SYSROOT=\"$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot\"" >> .config
        echo "CONFIG_EXTRA_LDFLAGS=\"--sysroot=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot\"" >> .config

    # 编译过程
    - name: Build with NDK
      run: |
        cd busybox
        export PATH=$CLANG_BIN:$PATH
        
        make CC=aarch64-linux-android35-clang \
             ARCH=arm64 \
             CROSS_COMPILE=aarch64-linux-android35- \
             CFLAGS="--target=aarch64-linux-android35" \
             LDFLAGS="--target=aarch64-linux-android35" \
             -j$(nproc)

    # 二进制验证
    - name: Verify binary
      run: |
        file busybox/busybox
        readelf -h busybox/busybox | grep -q 'ARM64_ELF' || (echo "架构验证失败"; exit 1)
        readelf -d busybox/busybox | grep -q 'FLAGS_1.*PIE' || (echo "PIE验证失败"; exit 1)

    # 产物上传
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: busybox-android-arm64
        path: busybox/busybox
