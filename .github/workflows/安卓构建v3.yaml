name: 安卓构建v3

on:
  workflow_dispatch:
    inputs:
      compiler_flags:
        description: '编译参数（使用空格分隔）'
        default: '-Oz -ffunction-sections -fdata-sections -Wl,--gc-sections -Wl,--strip-all -g0 -fno-unwind-tables -fno-asynchronous-unwind-tables'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - target: aarch64-linux-android
            suffix: arm64
          - target: armv7a-linux-androideabi
            suffix: arm
          - target: i686-linux-android
            suffix: x86
          - target: x86_64-linux-android
            suffix: x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup path
      run: |
        grep -E '^(nbbm|aapi|cbbm)=' config.env >> $GITHUB_ENV

    - name: Create SDK directory
      run: |
        sudo mkdir -p /var/android-sdk
        sudo chown -R $USER:$USER /var/android-sdk

    - name: Cache Android SDK and NDK
      uses: actions/cache@v4
      id: cache-android
      with:
        path: /var/android-sdk
        key: ${{ runner.os }}-android-${{ hashFiles('config.env') }}-${{ env.nbbm }}-${{ env.cbbm }}
        restore-keys: |
          ${{ runner.os }}-android-

    - name: Setup Android SDK
      if: steps.cache-android.outputs.cache-hit != 'true'
      run: |
        wget https://dl.google.com/android/repository/${{ env.cbbm }} -O cmdline-tools.zip
        unzip cmdline-tools.zip -d /var/android-sdk/cmdline-tools
        mv /var/android-sdk/cmdline-tools/cmdline-tools /var/android-sdk/cmdline-tools/latest

    - name: Set up Android environment variables
      run: |
        echo "ANDROID_HOME=/var/android-sdk" >> $GITHUB_ENV
        echo "/var/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Accept licenses
      if: steps.cache-android.outputs.cache-hit != 'true'
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

    - name: Install NDK
      if: steps.cache-android.outputs.cache-hit != 'true'
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;${{ env.nbbm }}" --sdk_root=$ANDROID_HOME

    - name: Set up NDK environment variables
      run: |
        echo "NDK_HOME=$ANDROID_HOME/ndk/${{ env.nbbm }}" >> $GITHUB_ENV
        echo "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    - name: Verify NDK Installation
      run: |
        echo "NDK路径: $NDK_HOME"
        ls -l $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang

    - name: Find C file
      id: find-c-file
      run: |
        c_files=( *.c )
        if [ ${#c_files[@]} -ne 1 ]; then
          echo "::error::必须且只能存在一个.c文件 (当前找到 ${#c_files[@]} 个)"
          exit 1
        fi
        echo "C_FILE=${c_files[0]}" >> $GITHUB_OUTPUT
        echo "OUTPUT_NAME=${c_files[0]%.*}" >> $GITHUB_OUTPUT

    - name: Build executable
      run: |
        $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang \
          --target=${{ matrix.arch.target }}${{ env.aapi }} \
          --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
          -fPIE -pie \
          ${{ inputs.compiler_flags }} \
          -o "${{ steps.find-c-file.outputs.OUTPUT_NAME }}-${{ matrix.arch.suffix }}" \
          "${{ steps.find-c-file.outputs.C_FILE }}"
        
    - name: Verify binary
      run: |
        file "${{ steps.find-c-file.outputs.OUTPUT_NAME }}-${{ matrix.arch.suffix }}"
        readelf -d "${{ steps.find-c-file.outputs.OUTPUT_NAME }}-${{ matrix.arch.suffix }}"
        sudo mkdir -p /tmp/ndk-bulid
        sudo mv "${{ steps.find-c-file.outputs.OUTPUT_NAME }}-${{ matrix.arch.suffix }}" "/tmp/ndk-bulid"

  package:
    runs-on: ubuntu-latest
    needs: build
    steps:

    - name: Create zip archive
      run: |
         cd /tmp/ndk-bulid && zip -r ./${{ steps.find-c-file.outputs.OUTPUT_NAME }}.zip ./*

    - name: Upload final package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.find-c-file.outputs.OUTPUT_NAME }}-all.zip
        path: ${{ steps.find-c-file.outputs.OUTPUT_NAME }}.zip
