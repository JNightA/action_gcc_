name: Advanced C/C++ Builder

on:
  push:
    branches: [ main ]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      build_subdir:
        description: '是否编译子目录？ (yes/no)'
        required: true
        type: choice
        options:
          - no
          - yes
        default: 'no'
      subdir_path:
        description: '请输入要编译的子目录路径（留空则自动检测）'
        required: false
        default: ''
      target_arch:
        description: '选择目标架构'
        required: true
        type: choice
        options:
          - arm32
          - arm64
        default: 'arm64'
      compile_flags:
        description: '自定义编译参数（默认：-pie）'
        required: false
        default: '-pie'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      exec_name: ${{ steps.detect.outputs.exec_name }}
      target_arch: ${{ github.event.inputs.target_arch }}
      release_tag: ${{ steps.get_tag.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version tag
      id: get_tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        tag="${GITHUB_REF#refs/tags/}"
        echo "tag=$tag" >> $GITHUB_OUTPUT

    - name: Cache APT packages
      uses: actions/cache@v4
      id: cache-apt
      with:
        path: |
          ~/apt-cache
        key: ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}
        restore-keys: |
          ${{ runner.os }}-apt-${{ github.event.inputs.target_arch }}-

    - name: Setup toolchain
      run: |
        sudo mkdir -p ~/apt-cache/archives
        sudo ln -sf ~/apt-cache/archives /var/cache/apt/archives
        
        sudo apt-get update -o Dir::Cache::archives="~/apt-cache/archives"
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            sudo apt-get install -y gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
            ;;
          arm64)
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            ;;
          *)
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            ;;
        esac

    - name: Detect source files
      id: detect
      run: |
        search_path="."
        if [[ "${{ github.event.inputs.build_subdir }}" == "yes" ]]; then
          search_path="${ { github.event.inputs.subdir_path }:-*}"
          search_path="${search_path%/}/"
        fi

        # Find source files
        c_files=$(find "$search_path" -name '*.c' -not -path '*/.*')
        cpp_files=$(find "$search_path" -name '*.cpp' -o -name '*.cc' -not -path '*/.*')
        all_files=$(echo -e "$c_files\n$cpp_files" | grep -v '^$')
        
        if [ -z "$all_files" ]; then
          echo "::error::未找到任何源文件"
          exit 1
        fi

        # Determine compiler type
        if [ -n "$cpp_files" ]; then
          echo "compiler_type=g++" >> $GITHUB_OUTPUT
        else
          echo "compiler_type=gcc" >> $GITHUB_OUTPUT
        fi

        # Get main filename
        first_file=$(echo "$all_files" | head -n1 | xargs basename -s .c | sed 's/\.cpp$//;s/\.cc$//')
        echo "exec_name=$first_file" >> $GITHUB_OUTPUT
        echo "source_files=$all_files" >> $GITHUB_OUTPUT

    - name: Compile
      run: |
        # Create output directory
        mkdir -p bin

        # Set compiler
        case "${{ github.event.inputs.target_arch }}" in
          arm32)
            [ "${{ steps.detect.outputs.compiler_type }}" = "g++" ] && \
              compiler=arm-linux-gnueabi-g++ || \
              compiler=arm-linux-gnueabi-gcc
            suffix="-arm32"
            ;;
          arm64)
            [ "${{ steps.detect.outputs.compiler_type }}" = "g++" ] && \
              compiler=aarch64-linux-gnu-g++ || \
              compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
          *)
            [ "${{ steps.detect.outputs.compiler_type }}" = "g++" ] && \
              compiler=aarch64-linux-gnu-g++ || \
              compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
        esac

        # Compile with architecture-specific flags
        $compiler ${{ github.event.inputs.compile_flags }} -static \
          -o "bin/${{ steps.detect.outputs.exec_name }}${suffix}" \
          ${{ steps.detect.outputs.source_files }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.detect.outputs.exec_name }}_${{ github.event.inputs.target_arch }}
        path: bin/${{ steps.detect.outputs.exec_name }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.exec_name }}_${{ needs.build.outputs.target_arch }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.release_tag }}
          release_name: "Release ${{ needs.build.outputs.release_tag }} (${{ needs.build.outputs.target_arch }})"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.exec_name }}*
          asset_name: ${{ needs.build.outputs.exec_name }}_${{ needs.build.outputs.target_arch }}
          asset_content_type: application/octet-stream
