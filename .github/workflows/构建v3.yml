name: 高级C/C ++构建器V3

on:
  push:
    branches: [ main ]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      build_subdir:
        description: '是否编译子目录？ (yes/no)'
        required: true
        type: choice
        options:
          - no
          - yes
        default: 'no'
      subdir_path:
        description: '请输入要编译的子目录路径（留空则自动检测）'
        required: false
        default: ''
      target_arch:
        description: '选择目标架构'
        required: true
        type: choice
        options:
          - arm32
          - arm64
        default: 'arm64'
      compile_flags:
        description: '自定义编译参数（默认：-pie）'
        required: false
        default: '-pie'

env:
  TARGET_ARCH: ${{ github.event.inputs.target_arch || 'arm64' }}
  COMPILE_FLAGS: ${{ github.event.inputs.compile_flags || '-pie' }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      exec_name: ${{ steps.detect.outputs.exec_name }}
      release_tag: ${{ steps.get_tag.outputs.tag }}
    
    steps:
    - name: 查看代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的提交历史用于标签检测

    - name: 获取版本标签
      id: get_tag
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          tag="${GITHUB_REF#refs/tags/}"
        else
          # 获取最新的标签（按时间排序）
          latest_tag=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="nightly-$(date +%Y%m%d)"
            echo "生成临时标签: $latest_tag"
          fi
          tag="$latest_tag"
        fi
        echo "tag=$tag" >> $GITHUB_OUTPUT
        # 创建正确的APT缓存目录结构
        sudo mkdir -p /var/cache/apt/archives/partial
        # 清除可能存在的旧配置
        sudo rm -f /etc/apt/apt.conf.d/90cache || true
        # 设置APT缓存路径
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' | sudo tee /etc/apt/apt.conf.d/90cache
        echo 'Dir::Cache::archives "/var/cache/apt/archives";' | sudo tee -a /etc/apt/apt.conf.d/90cache

    - name: 缓存工具链 修不了
      uses: actions/cache@v4
      id: toolchain-cache
      with:
        path: |
          /var/cache/apt/archives
        key: ${{ runner.os }}-${{ env.TARGET_ARCH }}-toolchain-v4
        restore-keys: |
          ${{ runner.os }}-${{ env.TARGET_ARCH }}-toolchain-

    - name: 安装工具链 修不了
      run: |
        # 仅当缓存未命中时才更新
        if [ "${{ steps.cache-toolchain.outputs.cache-hit }}" != "true" ]; then
          echo "缓存未命中，安装工具链..."
          sudo apt-get update -o Dir::Cache::archives="/var/cache/apt/archives"
          
          case "${{ env.TARGET_ARCH }}" in
            arm32)
              sudo apt-get install -y --no-install-recommends gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
              ;;
            arm64)
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              ;;
          esac

          # 清理不需要的文件
          sudo apt-get clean
        else
          echo "使用缓存的工具链软件包"
          # 从缓存安装deb包
          sudo dpkg -i /var/cache/apt/archives/*.deb || true
          sudo apt-get install -f -y
        fi
        
    - name: 检测源文件
      id: detect
      run: |
        search_path="."
        if [[ "${{ github.event.inputs.build_subdir }}" == "yes" ]]; then
          search_path="${ { github.event.inputs.subdir_path }:-*}"
          search_path="${search_path%/}/"
        fi

        # Find source files
        c_files=$(find "$search_path" -name '*.c' -not -path '*/.*')
        cpp_files=$(find "$search_path" -name '*.cpp' -o -name '*.cc' -not -path '*/.*')
        all_files=$(echo -e "$c_files\n$cpp_files" | grep -v '^$')
        
        if [ -z "$all_files" ]; then
          echo "::error::未找到任何源文件"
          exit 1
        fi

        # Determine compiler type
        if [ -n "$cpp_files" ]; then
          echo "compiler_type=g++" >> $GITHUB_OUTPUT
        else
          echo "compiler_type=gcc" >> $GITHUB_OUTPUT
        fi

        # Get main filename
        first_file=$(echo "$all_files" | head -n1 | xargs basename -s .c | sed 's/\.cpp$//;s/\.cc$//')
        echo "exec_name=$first_file" >> $GITHUB_OUTPUT
        echo "source_files=$all_files" >> $GITHUB_OUTPUT

    - name: 编译
      run: |
        # Create output directory
        mkdir -p bin

        # Set compiler
        case "${{ env.TARGET_ARCH }}" in
          arm32)
            [ "${{ steps.detect.outputs.compiler_type }}" = "g++" ] && \
              compiler=arm-linux-gnueabi-g++ || \
              compiler=arm-linux-gnueabi-gcc
            suffix="-arm32"
            ;;
          arm64)
            [ "${{ steps.detect.outputs.compiler_type }}" = "g++" ] && \
              compiler=aarch64-linux-gnu-g++ || \
              compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
          *)
            [ "${{ steps.detect.outputs.compiler_type }}" = "g++" ] && \
              compiler=aarch64-linux-gnu-g++ || \
              compiler=aarch64-linux-gnu-gcc
            suffix="-arm64"
            ;;
        esac

        $compiler ${{ env.COMPILE_FLAGS }} -static \
          -o "bin/${{ steps.detect.outputs.exec_name }}${suffix}" \
          ${{ steps.detect.outputs.source_files }}

    - name: 上传工件
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.detect.outputs.exec_name }}_${{ env.TARGET_ARCH }}
        path: bin/${{ steps.detect.outputs.exec_name }}*          
        # 添加保留目录结构参数
        retention-days: 1
        if-no-files-found: error
        
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: 下载工件
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.exec_name }}_${{ env.TARGET_ARCH }}
        path: release_files

    - name: 创建发布
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.build.outputs.release_tag }}
        name: "${{ needs.build.outputs.release_tag }} (${{ env.TARGET_ARCH }})"
        files: |
          release_files/*
        draft: false
        prerelease: false
        generate_release_notes: true
