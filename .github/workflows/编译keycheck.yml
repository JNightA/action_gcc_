name: keycheck build

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup path
      run: |
        grep -E '^(nbbm|aapi|cbbm)=' config.env >> $GITHUB_ENV

    - name: Create SDK directory
      run: |
        sudo mkdir -p /var/android-sdk
        sudo chown -R $USER:$USER /var/android-sdk

    - name: Cache Android SDK and NDK
      uses: actions/cache@v4
      id: cache-android
      with:
        path: /var/android-sdk
        key: ${{ runner.os }}-android-${{ hashFiles('config.env') }}-${{ env.nbbm }}-${{ env.cbbm }}
        restore-keys: |
          ${{ runner.os }}-android-

    - name: Setup Android SDK
      if: steps.cache-android.outputs.cache-hit != 'true'
      run: |
        wget https://dl.google.com/android/repository/${{ env.cbbm }} -O cmdline-tools.zip
        unzip cmdline-tools.zip -d /var/android-sdk/cmdline-tools
        mv /var/android-sdk/cmdline-tools/cmdline-tools /var/android-sdk/cmdline-tools/latest

    - name: Set up Android environment variables
      run: |
        echo "ANDROID_HOME=/var/android-sdk" >> $GITHUB_ENV
        echo "/var/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

    - name: Accept licenses
      if: steps.cache-android.outputs.cache-hit != 'true'
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

    - name: Install NDK
      if: steps.cache-android.outputs.cache-hit != 'true'
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;${{ env.nbbm }}" --sdk_root=$ANDROID_HOME

    - name: Set up NDK environment variables
      run: |
        echo "NDK_HOME=$ANDROID_HOME/ndk/${{ env.nbbm }}" >> $GITHUB_ENV
        echo "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    - name: Verify NDK Installation
      run: |
        echo "NDK路径: $NDK_HOME"
        ls -l $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang

    - name: Find C file
      id: find-c-file
      run: |
        c_files=( *.c )
        if [ ${#c_files[@]} -ne 1 ]; then
          echo "::error::必须且只能存在一个.c文件 (当前找到 ${#c_files[@]} 个)"
          exit 1
        fi
        echo "C_FILE=${c_files[0]}" >> $GITHUB_OUTPUT
        echo "OUTPUT_NAME=${c_files[0]%.*}" >> $GITHUB_OUTPUT

    - name: Build executable
      run: |
        echo "路径$(pwd) $(ls -a)"
        $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --target=aarch64-linux-android35 --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -static -nostdlib -Wl,--build-id=sha1 -Wl,--no-undefined -Wl,-z,nocopyreloc -I$NDK_HOME/sysroot/usr/include/aarch64-linux-android -L$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/35 -o keycheck keycheck.c
        $NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang \
          --target=aarch64-linux-android${{ env.aapi }} \           # 目标架构 + API级别
          --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot \  # 系统库根目录
          -fuse-ld=lld \                               # 使用LLD链接器
          -static \                                    # 强制静态链接
          -nostdlib \                                  # 禁止自动链接标准库
          -Wl,--build-id=sha1 \                        # 生成构建ID
          -Wl,--no-undefined \                         # 禁止未定义符号
          -Wl,-z,nocopyreloc \                         # 禁用copy relocations
          -I$NDK_HOME/sysroot/usr/include/aarch64-linux-android \  # 架构头文件路径
          -L$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/${{ env.aapi }} \  # 架构库路径
          -o "${{ steps.find-c-file.outputs.OUTPUT_NAME }}" \
          "${{ steps.find-c-file.outputs.C_FILE }}"

    - name: Verify binary
      run: |
        file "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"
        readelf -d "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-binary
        path: "${{ steps.find-c-file.outputs.OUTPUT_NAME }}"
